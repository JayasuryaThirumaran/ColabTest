# -*- coding: utf-8 -*-
"""Yet another copy of Exploratory Data Analysis of the Titanic Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R4BwlDJcLuwyIkMr8_jxHKNOjFFZHqc3

# **NPCI Upskilling - AI/ML Data Science & Engineering**
## A Program by IIIT-H and TalentSprint

## Dataset Description

The sinking of the Titanic is one of the most infamous shipwrecks in history.

On April 15, 1912, during her maiden voyage, the widely considered “unsinkable” RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren’t enough lifeboats for everyone onboard, resulting in the death of many passengers and crew.

While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.

[ Data Set Link: Kaggle](https://www.kaggle.com/competitions/titanic)

<br/>

### Data Set Characteristics:

**PassengerId:** Id of the Passenger

**Survived:** Survived or Not information

**Pclass:** Socio-economic status (SES)
  * 1st = Upper
  * 2nd = Middle
  * 3rd = Lower

**Name:** Surname, First Names of the Passenger

**Sex:** Gender of the Passenger

**Age:** Age of the Passenger

**SibSp:**	No. of siblings/spouse of the passenger aboard the Titanic

**Parch:**	No. of parents/children of the passenger aboard the Titanic

**Ticket:**	Ticket number

**Fare:** Passenger fare

**Cabin:**	Cabin number

**Embarked:** Port of Embarkation
  * S = Southampton
  * C = Cherbourg
  * Q = Queenstown
"""

# @title Download the datasets
from IPython import get_ipython

ipython = get_ipython()

notebook="U1_MH1_Data_Munging" #name of the notebook

def setup():
    from IPython.display import HTML, display
    ipython.magic("sx wget https://cdn.iiith.talentsprint.com/aiml/Experiment_related_data/titanic.csv")
    ipython.magic("sx wget https://cdn.iiith.talentsprint.com/aiml/Experiment_related_data/test_titanic.csv")
    print("Data downloaded successfully")
    return

setup()

"""## Import Required Packages"""

# pandas
import pandas as pd
from pandas import Series,DataFrame

# numpy, matplotlib, seaborn
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')

"""## Load and Explore the Data

* Understand different features in the dataset
* Understand the data types of each columns
* Notice the columns of missing values



"""

# get titanic csv file as a DataFrame
titanic_df = pd.read_csv("titanic.csv")

# preview the data
first_name = titanic_df['Name'].values[0]
expected_name = "Braund, Mr. Owen Harris"
assert first_name == expected_name
assert len(titanic_df) == 891

# prompt: # get titanic csv file as a DataFrame
# titanic_df = pd.read_csv("titanic.csv")
# # preview the data
# first_name = titanic_df['Name'].values[0]
# expected_name = "Braund, Mr. Owen Harris"
# assert first_name == expected_name
# assert len(titanic_df) == 891
# add comments for the above code

from IPython import get_ipython
from IPython.display import HTML, display
import pandas as pd
from pandas import Series,DataFrame
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Set the plotting style
sns.set_style('whitegrid')

# Function to download datasets (not directly related to the core task but provided for completeness)
ipython = get_ipython()
notebook="U1_MH1_Data_Munging" #name of the notebook

def setup():
    ipython.magic("sx wget https://cdn.iiith.talentsprint.com/aiml/Experiment_related_data/titanic.csv")
    ipython.magic("sx wget https://cdn.iiith.talentsprint.com/aiml/Experiment_related_data/test_titanic.csv")
    print("Data downloaded successfully")
    return

setup()

# Load the Titanic dataset into a pandas DataFrame
titanic_df = pd.read_csv("titanic.csv")

# Extract the first name from the 'Name' column
first_name = titanic_df['Name'].values[0]

# Expected value for the first name
expected_name = "Braund, Mr. Owen Harris"

# Assertion tests to validate data loading and content
# Check if the extracted first name matches the expected name
assert first_name == expected_name

# Check if the DataFrame has the expected number of rows (passengers)
assert len(titanic_df) == 891

titanic_df.info()

"""### Drop the columns:

Drop the columns: - "PassengerId", "Name", "Tickets"




"""

# drop unnecessary columns, these columns won't be useful in analysis
titanic_df = titanic_df.drop(['PassengerId','Name','Ticket'], axis=1)

# prompt: add comment for the above cde

from IPython import get_ipython
from IPython.display import HTML, display
import pandas as pd
from pandas import Series,DataFrame
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import HTML, display

# **NPCI Upskilling - AI/ML Data Science & Engineering**
# ## A Program by IIIT-H and TalentSprint
# ## Dataset Description
# The sinking of the Titanic is one of the most infamous shipwrecks in history.
#
# On April 15, 1912, during her maiden voyage, the widely considered “unsinkable” RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren’t enough lifeboats for everyone onboard, resulting in the death of many passengers and crew.
#
# While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.
#
# [ Data Set Link: Kaggle](https://www.kaggle.com/competitions/titanic)
#
# <br/>
#
# ### Data Set Characteristics:
#
# **PassengerId:** Id of the Passenger
#
# **Survived:** Survived or Not information
#
# **Pclass:** Socio-economic status (SES)
#   * 1st = Upper
#   * 2nd = Middle
#   * 3rd = Lower
#
# **Name:** Surname, First Names of the Passenger
#
# **Sex:** Gender of the Passenger
#
# **Age:** Age of the Passenger
#
# **SibSp:**	No. of siblings/spouse of the passenger aboard the Titanic
#
# **Parch:**	No. of parents/children of the passenger aboard the Titanic
#
# **Ticket:**	Ticket number
#
# **Fare:** Passenger fare
#
# **Cabin:**	Cabin number
#
# **Embarked:** Port of Embarkation
#   * S = Southampton
#   * C = Cherbourg
#   * Q = Queenstown
#
# @title Download the datasets

ipython = get_ipython()

notebook="U1_MH1_Data_Munging" #name of the notebook

def setup():
    ipython.magic("sx wget https://cdn.iiith.talentsprint.com/aiml/Experiment_related_data/titanic.csv")
    ipython.magic("sx wget https://cdn.iiith.talentsprint.com/aiml/Experiment_related_data/test_titanic.csv")
    print("Data downloaded successfully")
    return

setup()
# ## Import Required Packages
# pandas

# numpy, matplotlib, seaborn
sns.set_style('whitegrid')
# ## Load and Explore the Data
#
# * Understand different features in the dataset
# * Understand the data types of each columns
# * Notice the columns of missing values
#
#
#
# # Load the Titanic dataset
titanic_df = pd.read_csv("titanic.csv")

# Preview the data and perform assertions for data validation
first_name = titanic_df['Name'].values[0]  # Extract the first name
expected_name = "Braund, Mr. Owen Harris"  # Expected first name
assert first_name == expected_name  # Check if the extracted name matches the expected name
assert len(titanic_df) == 891  # Check if the DataFrame contains the expected number of rows

# Set plotting style
sns.set_style('whitegrid')

# Function to download datasets (not directly related to the core task but provided for completeness)
ipython = get_ipython()
notebook="U1_MH1_Data_Munging" #name of the notebook

def setup():
    ipython.magic("sx wget https://cdn.iiith.talentsprint.com/aiml/Experiment_related_data/titanic.csv")
    ipython.magic("sx wget https://cdn.iiith.talentsprint.com/aiml/Experiment_related_data/test_titanic.csv")
    print("Data downloaded successfully")
    return

setup()

# Load the Titanic dataset into a pandas DataFrame
titanic_df = pd.read_csv("titanic.csv")

# Extract the first name from the 'Name' column
first_name = titanic_df['Name'].values[0]

# Expected value for the first name
expected_name = "Braund, Mr. Owen Harris"

# Assertion tests to validate data loading and content
# Check if the extracted first name matches the expected name
assert first_name == expected_name

# Check if the DataFrame has the expected number of rows (passengers)
assert len(titanic_df) == 891
titanic_df.info() # Display data info
# ### Drop the columns:
#
# Drop the columns: - "PassengerId", "Name", "Tickets"
#
#
#
#
# # Drop unnecessary columns for analysis
titanic_df = titanic_df.drop(['PassengerId','Name','Ticket'], axis=1) # Drop specified columns from the DataFrame

"""### Data Cleaning and Processing"""

# Embarked

# In titanic_df, fill the two missing values with the most occurred value, which is "S".
titanic_df["Embarked"] = titanic_df["Embarked"].fillna("S")
assert titanic_df["Embarked"].isnull().sum() == 0

# group by embarked, and get the mean for survived passengers for each value in Embarked
embark_perc = titanic_df[["Embarked", "Survived"]].groupby(['Embarked'],as_index=False).mean()

assert embark_perc.iloc[0]['Survived'] == 0.5535714285714286
embark_perc.iloc[1]['Survived'] == 0.38961038961038963
embark_perc.iloc[2]['Survived'] == 0.33900928792569657

# Plot 1: Visualize the relationship between Embarked and Survived using a point plot.
sns.catplot(x='Embarked', y='Survived', data=titanic_df, kind='point', height=4, aspect=3)

# Set up a multi-panel plot to visualize counts and distributions.
fig, (axis1, axis2, axis3) = plt.subplots(1, 3, figsize=(15, 5))

# Plot 2: Count plot of the 'Embarked' categories to visualize counts of passengers boarding at each location.
sns.countplot(x='Embarked', data=titanic_df, ax=axis1)

# Plot 3: Count plot of survival status (Survived=0 or 1) split by Embarked values using hue.
sns.countplot(x='Survived', hue="Embarked", data=titanic_df, order=[1, 0], ax=axis2)

# Plot 4: Bar plot to visualize the average survival rate by Embarked categories ('S', 'C', 'Q').
sns.barplot(x='Embarked', y='Survived', data=embark_perc, order=['S', 'C', 'Q'], ax=axis3)

# Create dummy variables for 'Embarked' column using one-hot encoding.
embark_dummies_titanic = pd.get_dummies(titanic_df['Embarked'])

# Drop the 'S' category dummy variable from the analysis based on prior observations.
embark_dummies_titanic.drop(['S'], axis=1, inplace=True)

# Add these new dummy variables to the Titanic DataFrame.
titanic_df = titanic_df.join(embark_dummies_titanic)

# Drop the original 'Embarked' column, as it's been replaced by dummy variables.
titanic_df.drop(['Embarked'], axis=1, inplace=True)

# Fare

# convert from float to int
titanic_df['Fare'] = titanic_df['Fare'].astype(int)

# get fare for survived & didn't survive passengers
fare_not_survived = titanic_df["Fare"][titanic_df["Survived"] == 0]
fare_survived     = titanic_df["Fare"][titanic_df["Survived"] == 1]

assert fare_survived.mean() == 47.99122807017544
assert fare_not_survived.mean() == 21.690346083788707

# get average and std for fare of survived/not survived passengers
average_fare = DataFrame([fare_not_survived.mean(), fare_survived.mean()])
std_fare      = DataFrame([fare_not_survived.std(), fare_survived.std()])

# plot
titanic_df['Fare'].plot(kind='hist', figsize=(15,3),bins=100, xlim=(0,50))

average_fare.index.names = std_fare.index.names = ["Survived"]
average_fare.plot(yerr=std_fare,kind='bar',legend=False)

import warnings
warnings.filterwarnings('ignore')

# Age

# get average, std, and number of NaN values in titanic_df
average_age_titanic   = titanic_df["Age"].mean()
std_age_titanic       = titanic_df["Age"].std()
count_nan_age_titanic = titanic_df["Age"].isnull().sum()

assert average_age_titanic == 29.69911764705882
assert std_age_titanic == 14.526497332334044
assert count_nan_age_titanic == 177

fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,4))
axis1.set_title('Original Age values - Titanic')
axis2.set_title('New Age values - Titanic')

# generate random numbers between (mean - std) & (mean + std)
rand_1 = np.random.randint(average_age_titanic - std_age_titanic, average_age_titanic + std_age_titanic, size = count_nan_age_titanic)

# plot original Age values
# NOTE: drop all null values, and convert to int
titanic_df['Age'].dropna().astype(int).hist(bins=70, ax=axis1)

# fill NaN values in Age column with random values generated
titanic_df["Age"][np.isnan(titanic_df["Age"])] = rand_1

# convert from float to int
titanic_df['Age'] = titanic_df['Age'].astype(int)

# plot new Age Values
titanic_df['Age'].hist(bins=70, ax=axis2)

# .... continue with plot Age column

# peaks for survived/not survived passengers by their age
facet = sns.FacetGrid(titanic_df, hue="Survived",aspect=4)
facet.map(sns.kdeplot,'Age',shade= True)
facet.set(xlim=(0, titanic_df['Age'].max()))
facet.add_legend()

# average survived passengers by age
fig, axis1 = plt.subplots(1,1,figsize=(18,4))
average_age = titanic_df[["Age", "Survived"]].groupby(['Age'],as_index=False).mean()
sns.barplot(x='Age', y='Survived', data=average_age)

# Cabin
# It has a lot of NaN values, so it won't cause a remarkable impact on analysis
titanic_df.drop("Cabin",axis=1,inplace=True)

# Family

# Instead of having two columns Parch & SibSp,
# we can have only one column represent if the passenger had any family member aboard or not,
# Meaning, if having any family member(whether parent, brother, ...etc) will increase chances of Survival or not.
titanic_df['Family'] =  titanic_df["Parch"] + titanic_df["SibSp"]
titanic_df['Family'].loc[titanic_df['Family'] > 0] = 1
titanic_df['Family'].loc[titanic_df['Family'] == 0] = 0


# drop Parch & SibSp
titanic_df = titanic_df.drop(['SibSp','Parch'], axis=1)

# plot
fig, (axis1,axis2) = plt.subplots(1,2,sharex=True,figsize=(10,5))

# sns.factorplot('Family',data=titanic_df,kind='count',ax=axis1)
sns.countplot(x='Family', data=titanic_df, order=[1,0], ax=axis1)

# average of survived for those who had/didn't have any family member
family_perc = titanic_df[["Family", "Survived"]].groupby(['Family'],as_index=False).mean()
sns.barplot(x='Family', y='Survived', data=family_perc, order=[1,0], ax=axis2)

axis1.set_xticklabels(["With Family","Alone"], rotation=0)

# Sex

# As we see, children(age < ~16) on aboard seem to have a high chances for Survival.
# So, we can classify passengers as males, females, and child
def get_person(passenger):
    age,sex = passenger
    return 'child' if age < 16 else sex

titanic_df['Person'] = titanic_df[['Age','Sex']].apply(get_person,axis=1)

# No need to use Sex column since we created Person column
titanic_df.drop(['Sex'],axis=1,inplace=True)

# create dummy variables for Person column, & drop Male as it has the lowest average of survived passengers
person_dummies_titanic  = pd.get_dummies(titanic_df['Person'])
person_dummies_titanic.columns = ['Child','Female','Male']
person_dummies_titanic.drop(['Male'], axis=1, inplace=True)


titanic_df = titanic_df.join(person_dummies_titanic)

# average of survived for each Person(male, female, or child)
person_perc = titanic_df[["Person", "Survived"]].groupby(['Person'],as_index=False).mean()

assert person_perc[person_perc['Person'] == 'female']['Survived'].values[0] > person_perc[person_perc['Person'] == 'child']['Survived'].values[0]
assert person_perc[person_perc['Person'] == 'child']['Survived'].values[0] > person_perc[person_perc['Person'] == 'male']['Survived'].values[0]

# Pclass

# sns.factorplot('Pclass',data=titanic_df,kind='count',order=[1,2,3])
sns.catplot(x='Pclass', y='Survived', order=[1, 2, 3], data=titanic_df, kind='point', height=5, aspect=1.5)

# create dummy variables for Pclass column, & drop 3rd class as it has the lowest average of survived passengers
pclass_dummies_titanic  = pd.get_dummies(titanic_df['Pclass'])
pclass_dummies_titanic.columns = ['Class_1','Class_2','Class_3']
pclass_dummies_titanic.drop(['Class_3'], axis=1, inplace=True)

titanic_df.drop(['Pclass'],axis=1,inplace=True)

titanic_df = titanic_df.join(pclass_dummies_titanic)

"""### Please answer the questions below to complete the experiment:



"""

# @title How can you remove a column from a Pandas DataFrame?  { run: "auto", form-width: "500px", display-mode: "form" }
Answer = "df.drop('column_name', axis=1)" #@param ["", "df.drop('column_name', axis=1)", "df.remove('column_name')","del df['column_name']","Both a and c"]

#@title How was the experiment? { run: "auto", form-width: "500px", display-mode: "form" }
Complexity = "Was Tough, but I did it" #@param ["","Too Simple, I am wasting time", "Good, But Not Challenging for me", "Good and Challenging for me", "Was Tough, but I did it", "Too Difficult for me"]

#@title If it was too easy, what more would you have liked to be added? If it was very difficult, what would you have liked to have been removed? { run: "auto", display-mode: "form" }
Additional = "xyzt more would you have liked to be added? If it was very difficult, what would" #@param {type:"string"}

#@title Can you identify the concepts from the lecture which this experiment covered? { run: "auto", vertical-output: true, display-mode: "form" }
Concepts = "Yes" #@param ["","Yes", "No"]

#@title  Text and image description/explanation and code comments within the experiment: { run: "auto", vertical-output: true, display-mode: "form" }
Comments = "Not Useful" #@param ["","Very Useful", "Somewhat Useful", "Not Useful", "Didn't use"]

#@title Mentor Support: { run: "auto", vertical-output: true, display-mode: "form" }
Mentor_support = "Didn't use" #@param ["","Very Useful", "Somewhat Useful", "Not Useful", "Didn't use"]

#@title Run this cell to submit your notebook for grading { vertical-output: true }
try:
  if submission_id:
      return_id = submit_notebook()
      if return_id : submission_id = return_id
  else:
      print("Please complete the setup first.")
except NameError:
  print ("Please complete the setup first.")